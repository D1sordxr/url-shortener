// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AnalyticsResponse defines model for AnalyticsResponse.
type AnalyticsResponse struct {
	// Alias Short URL alias
	Alias string `json:"alias"`

	// DailyStats Aggregated statistics by day
	DailyStats []DailyStat `json:"daily_stats"`

	// FirstVisit First visit timestamp
	FirstVisit *time.Time `json:"first_visit"`

	// LastVisit Last visit timestamp
	LastVisit *time.Time `json:"last_visit"`

	// OriginalUrl Original URL
	OriginalUrl string `json:"original_url"`

	// TotalVisits Total number of visits
	TotalVisits int64 `json:"total_visits"`

	// UniqueVisitors Number of unique visitors
	UniqueVisitors int64 `json:"unique_visitors"`

	// UserAgentStats Aggregated statistics by user agent
	UserAgentStats []UserAgentStat `json:"user_agent_stats"`

	// Visits Detailed visit statistics
	Visits []VisitStat `json:"visits"`
}

// CreateURLRequest defines model for CreateURLRequest.
type CreateURLRequest struct {
	// Alias Custom alias (optional, auto-generated if not provided)
	Alias *string `json:"alias,omitempty"`

	// Url Original URL to shorten
	Url string `json:"url"`
}

// DailyStat defines model for DailyStat.
type DailyStat struct {
	// Date Date of visits
	Date openapi_types.Date `json:"date"`

	// VisitCount Number of visits on this date
	VisitCount int64 `json:"visit_count"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message description
	Error string `json:"error"`
}

// URLResponse defines model for URLResponse.
type URLResponse struct {
	// Alias Short URL alias
	Alias *string `json:"alias,omitempty"`

	// CreatedAt Creation timestamp
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id URL identifier
	Id *int64 `json:"id,omitempty"`

	// OriginalUrl Original URL
	OriginalUrl *string `json:"original_url,omitempty"`

	// ShortUrl Full short URL
	ShortUrl *string `json:"short_url,omitempty"`
}

// UserAgentStat defines model for UserAgentStat.
type UserAgentStat struct {
	// UserAgent User agent string
	UserAgent string `json:"user_agent"`

	// VisitCount Number of visits with this user agent
	VisitCount int64 `json:"visit_count"`
}

// VisitStat defines model for VisitStat.
type VisitStat struct {
	// CreatedAt Visit timestamp
	CreatedAt time.Time `json:"created_at"`

	// Date Date of the visit
	Date openapi_types.Date `json:"date"`

	// IpAddress Visitor IP address
	IpAddress string `json:"ip_address"`

	// Referer HTTP referer
	Referer *string `json:"referer"`

	// UserAgent User agent string
	UserAgent string `json:"user_agent"`
}

// PostShortenJSONRequestBody defines body for PostShorten for application/json ContentType.
type PostShortenJSONRequestBody = CreateURLRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get URL analytics
	// (GET /analytics/{alias})
	GetAnalyticsAlias(c *gin.Context, alias string)
	// Redirect to original URL
	// (GET /s/{alias})
	GetSAlias(c *gin.Context, alias string)
	// Create short URL
	// (POST /shorten)
	PostShorten(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAnalyticsAlias operation middleware
func (siw *ServerInterfaceWrapper) GetAnalyticsAlias(c *gin.Context) {

	var err error

	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithOptions("simple", "alias", c.Param("alias"), &alias, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter alias: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAnalyticsAlias(c, alias)
}

// GetSAlias operation middleware
func (siw *ServerInterfaceWrapper) GetSAlias(c *gin.Context) {

	var err error

	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithOptions("simple", "alias", c.Param("alias"), &alias, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter alias: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSAlias(c, alias)
}

// PostShorten operation middleware
func (siw *ServerInterfaceWrapper) PostShorten(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostShorten(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/analytics/:alias", wrapper.GetAnalyticsAlias)
	router.GET(options.BaseURL+"/s/:alias", wrapper.GetSAlias)
	router.POST(options.BaseURL+"/shorten", wrapper.PostShorten)
}

type GetAnalyticsAliasRequestObject struct {
	Alias string `json:"alias"`
}

type GetAnalyticsAliasResponseObject interface {
	VisitGetAnalyticsAliasResponse(w http.ResponseWriter) error
}

type GetAnalyticsAlias200JSONResponse AnalyticsResponse

func (response GetAnalyticsAlias200JSONResponse) VisitGetAnalyticsAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAnalyticsAlias404JSONResponse ErrorResponse

func (response GetAnalyticsAlias404JSONResponse) VisitGetAnalyticsAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAnalyticsAlias500JSONResponse ErrorResponse

func (response GetAnalyticsAlias500JSONResponse) VisitGetAnalyticsAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSAliasRequestObject struct {
	Alias string `json:"alias"`
}

type GetSAliasResponseObject interface {
	VisitGetSAliasResponse(w http.ResponseWriter) error
}

type GetSAlias302ResponseHeaders struct {
	Location string
}

type GetSAlias302Response struct {
	Headers GetSAlias302ResponseHeaders
}

func (response GetSAlias302Response) VisitGetSAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetSAlias404JSONResponse ErrorResponse

func (response GetSAlias404JSONResponse) VisitGetSAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSAlias500JSONResponse ErrorResponse

func (response GetSAlias500JSONResponse) VisitGetSAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostShortenRequestObject struct {
	Body *PostShortenJSONRequestBody
}

type PostShortenResponseObject interface {
	VisitPostShortenResponse(w http.ResponseWriter) error
}

type PostShorten201JSONResponse URLResponse

func (response PostShorten201JSONResponse) VisitPostShortenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostShorten400JSONResponse ErrorResponse

func (response PostShorten400JSONResponse) VisitPostShortenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostShorten409JSONResponse ErrorResponse

func (response PostShorten409JSONResponse) VisitPostShortenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostShorten500JSONResponse ErrorResponse

func (response PostShorten500JSONResponse) VisitPostShortenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get URL analytics
	// (GET /analytics/{alias})
	GetAnalyticsAlias(ctx context.Context, request GetAnalyticsAliasRequestObject) (GetAnalyticsAliasResponseObject, error)
	// Redirect to original URL
	// (GET /s/{alias})
	GetSAlias(ctx context.Context, request GetSAliasRequestObject) (GetSAliasResponseObject, error)
	// Create short URL
	// (POST /shorten)
	PostShorten(ctx context.Context, request PostShortenRequestObject) (PostShortenResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAnalyticsAlias operation middleware
func (sh *strictHandler) GetAnalyticsAlias(ctx *gin.Context, alias string) {
	var request GetAnalyticsAliasRequestObject

	request.Alias = alias

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAnalyticsAlias(ctx, request.(GetAnalyticsAliasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAnalyticsAlias")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAnalyticsAliasResponseObject); ok {
		if err := validResponse.VisitGetAnalyticsAliasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSAlias operation middleware
func (sh *strictHandler) GetSAlias(ctx *gin.Context, alias string) {
	var request GetSAliasRequestObject

	request.Alias = alias

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSAlias(ctx, request.(GetSAliasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSAlias")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSAliasResponseObject); ok {
		if err := validResponse.VisitGetSAliasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostShorten operation middleware
func (sh *strictHandler) PostShorten(ctx *gin.Context) {
	var request PostShortenRequestObject

	var body PostShortenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostShorten(ctx, request.(PostShortenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostShorten")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostShortenResponseObject); ok {
		if err := validResponse.VisitPostShortenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
