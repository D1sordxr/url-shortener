// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handler

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for CreateNotificationRequestChannel.
const (
	CreateNotificationRequestChannelEmail    CreateNotificationRequestChannel = "email"
	CreateNotificationRequestChannelSms      CreateNotificationRequestChannel = "sms"
	CreateNotificationRequestChannelTelegram CreateNotificationRequestChannel = "telegram"
)

// Defines values for NotificationResponseChannel.
const (
	NotificationResponseChannelEmail    NotificationResponseChannel = "email"
	NotificationResponseChannelSms      NotificationResponseChannel = "sms"
	NotificationResponseChannelTelegram NotificationResponseChannel = "telegram"
)

// Defines values for NotificationResponseStatus.
const (
	Declined NotificationResponseStatus = "declined"
	Failed   NotificationResponseStatus = "failed"
	Pending  NotificationResponseStatus = "pending"
	Sent     NotificationResponseStatus = "sent"
)

// CreateNotificationRequest defines model for CreateNotificationRequest.
type CreateNotificationRequest struct {
	// AuthorId User identifier (author)
	AuthorId string `json:"author_id"`

	// Channel Notification delivery channel
	Channel CreateNotificationRequestChannel `json:"channel"`

	// EmailTo Recipient email (required for email channel)
	EmailTo *string `json:"email_to,omitempty"`

	// Message Notification message content
	Message string `json:"message"`

	// ScheduledAt Scheduled delivery time in ISO 8601 format
	ScheduledAt time.Time `json:"scheduled_at"`

	// SmsTo Recipient phone number (required for SMS channel)
	SmsTo *string `json:"sms_to,omitempty"`

	// Subject Notification subject
	Subject string `json:"subject"`

	// TelegramId Recipient Telegram chat ID (required for telegram channel)
	TelegramId *int64 `json:"telegram_id,omitempty"`
}

// CreateNotificationRequestChannel Notification delivery channel
type CreateNotificationRequestChannel string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message description
	Error string `json:"error"`
}

// NotificationResponse defines model for NotificationResponse.
type NotificationResponse struct {
	// Attempts Number of delivery attempts
	Attempts *int16 `json:"attempts,omitempty"`

	// AuthorId User identifier (author), can be null
	AuthorId *string `json:"author_id"`

	// Channel Notification delivery channel
	Channel *NotificationResponseChannel `json:"channel,omitempty"`

	// CreatedAt Creation timestamp
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EmailTo Recipient email (for email channel)
	EmailTo *string `json:"email_to"`

	// Id Notification identifier
	Id *string `json:"id,omitempty"`

	// Message Notification message content
	Message *string `json:"message,omitempty"`

	// ScheduledAt Scheduled delivery time
	ScheduledAt *time.Time `json:"scheduled_at,omitempty"`

	// SentAt Actual sent time (null if not sent yet)
	SentAt *time.Time `json:"sent_at"`

	// SmsTo Recipient phone number (for SMS channel)
	SmsTo *string `json:"sms_to"`

	// Status Notification status
	Status *NotificationResponseStatus `json:"status,omitempty"`

	// Subject Notification subject
	Subject *string `json:"subject,omitempty"`

	// TelegramChatId Recipient Telegram chat ID (for telegram channel)
	TelegramChatId *int64 `json:"telegram_chat_id"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NotificationResponseChannel Notification delivery channel
type NotificationResponseChannel string

// NotificationResponseStatus Notification status
type NotificationResponseStatus string

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Details Additional success details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Result Success description
	Result string `json:"result"`
}

// PostNotifyJSONRequestBody defines body for PostNotify for application/json ContentType.
type PostNotifyJSONRequestBody = CreateNotificationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new notification
	// (POST /notify)
	PostNotify(c *gin.Context)
	// Cancel notification
	// (DELETE /notify/{id})
	DeleteNotifyId(c *gin.Context, id string)
	// Get notification by ID
	// (GET /notify/{id})
	GetNotifyId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostNotify operation middleware
func (siw *ServerInterfaceWrapper) PostNotify(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostNotify(c)
}

// DeleteNotifyId operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotifyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNotifyId(c, id)
}

// GetNotifyId operation middleware
func (siw *ServerInterfaceWrapper) GetNotifyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNotifyId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/notify", wrapper.PostNotify)
	router.DELETE(options.BaseURL+"/notify/:id", wrapper.DeleteNotifyId)
	router.GET(options.BaseURL+"/notify/:id", wrapper.GetNotifyId)
}

type PostNotifyRequestObject struct {
	Body *PostNotifyJSONRequestBody
}

type PostNotifyResponseObject interface {
	VisitPostNotifyResponse(w http.ResponseWriter) error
}

type PostNotify201JSONResponse NotificationResponse

func (response PostNotify201JSONResponse) VisitPostNotifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostNotify400JSONResponse ErrorResponse

func (response PostNotify400JSONResponse) VisitPostNotifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostNotify500JSONResponse ErrorResponse

func (response PostNotify500JSONResponse) VisitPostNotifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNotifyIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteNotifyIdResponseObject interface {
	VisitDeleteNotifyIdResponse(w http.ResponseWriter) error
}

type DeleteNotifyId200JSONResponse SuccessResponse

func (response DeleteNotifyId200JSONResponse) VisitDeleteNotifyIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNotifyId404JSONResponse ErrorResponse

func (response DeleteNotifyId404JSONResponse) VisitDeleteNotifyIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNotifyId500JSONResponse ErrorResponse

func (response DeleteNotifyId500JSONResponse) VisitDeleteNotifyIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNotifyIdRequestObject struct {
	Id string `json:"id"`
}

type GetNotifyIdResponseObject interface {
	VisitGetNotifyIdResponse(w http.ResponseWriter) error
}

type GetNotifyId200JSONResponse NotificationResponse

func (response GetNotifyId200JSONResponse) VisitGetNotifyIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNotifyId404JSONResponse ErrorResponse

func (response GetNotifyId404JSONResponse) VisitGetNotifyIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNotifyId500JSONResponse ErrorResponse

func (response GetNotifyId500JSONResponse) VisitGetNotifyIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create new notification
	// (POST /notify)
	PostNotify(ctx context.Context, request PostNotifyRequestObject) (PostNotifyResponseObject, error)
	// Cancel notification
	// (DELETE /notify/{id})
	DeleteNotifyId(ctx context.Context, request DeleteNotifyIdRequestObject) (DeleteNotifyIdResponseObject, error)
	// Get notification by ID
	// (GET /notify/{id})
	GetNotifyId(ctx context.Context, request GetNotifyIdRequestObject) (GetNotifyIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostNotify operation middleware
func (sh *strictHandler) PostNotify(ctx *gin.Context) {
	var request PostNotifyRequestObject

	var body PostNotifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostNotify(ctx, request.(PostNotifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostNotify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostNotifyResponseObject); ok {
		if err := validResponse.VisitPostNotifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteNotifyId operation middleware
func (sh *strictHandler) DeleteNotifyId(ctx *gin.Context, id string) {
	var request DeleteNotifyIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNotifyId(ctx, request.(DeleteNotifyIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNotifyId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteNotifyIdResponseObject); ok {
		if err := validResponse.VisitDeleteNotifyIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNotifyId operation middleware
func (sh *strictHandler) GetNotifyId(ctx *gin.Context, id string) {
	var request GetNotifyIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNotifyId(ctx, request.(GetNotifyIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNotifyId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNotifyIdResponseObject); ok {
		if err := validResponse.VisitGetNotifyIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
